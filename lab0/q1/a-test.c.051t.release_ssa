
;; Function fibonacci (fibonacci, funcdef_no=0, decl_uid=2345, cgraph_uid=1, symbol_order=0)

Released 0 names, 0.00%, removed 0 holes
int fibonacci (int n)
{
  int i;
  int c;
  int b;
  int a;
  int D.2361;
  int _4;
  int _9;
  int _14;

  <bb 2> :
  if (n_5(D) <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _14 = n_5(D);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 4> :
  a_6 = 0;
  b_7 = 1;
  i_8 = 2;
  goto <bb 6>; [INV]

  <bb 5> :
  c_10 = a_1 + b_2;
  a_11 = b_2;
  b_12 = c_10;
  i_13 = i_3 + 1;

  <bb 6> :
  # a_1 = PHI <a_6(4), a_11(5)>
  # b_2 = PHI <b_7(4), b_12(5)>
  # i_3 = PHI <i_8(4), i_13(5)>
  if (i_3 <= n_5(D))
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _9 = b_2;

  <bb 8> :
  # _4 = PHI <_14(3), _9(7)>
<L5>:
  return _4;

}



;; Function main (main, funcdef_no=1, decl_uid=2355, cgraph_uid=2, symbol_order=1)

Released 0 names, 0.00%, removed 0 holes
int main ()
{
  int n;
  int D.2363;
  int _1;
  int _2;
  int _8;

  <bb 2> :
  n_3 = 10;
  _1 = fibonacci (n_3);
  printf ("The %dth Fibonacci number is: %d\n", n_3, _1);
  _2 = n_3 * n_3;
  printf ("SQUARE(%d) = %d\n", n_3, _2);
  _8 = 0;

  <bb 3> :
<L0>:
  return _8;

}


